
package com.googlecode.jsonwebservice.attachment;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.1-hudson-28-
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "ChartService", targetNamespace = "http://jsonwebservice.googlecode.com/attachment", wsdlLocation = "file:/C:/Documents%20and%20Settings/ssaminathan/workspace/attachment-json/WebContent/WEB-INF/wsdl/attachment.wsdl")
public class ChartService
    extends Service
{

    private final static URL CHARTSERVICE_WSDL_LOCATION;
    private final static WebServiceException CHARTSERVICE_EXCEPTION;
    private final static QName CHARTSERVICE_QNAME = new QName("http://jsonwebservice.googlecode.com/attachment", "ChartService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("file:/C:/Documents%20and%20Settings/ssaminathan/workspace/attachment-json/WebContent/WEB-INF/wsdl/attachment.wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        CHARTSERVICE_WSDL_LOCATION = url;
        CHARTSERVICE_EXCEPTION = e;
    }

    public ChartService() {
        super(__getWsdlLocation(), CHARTSERVICE_QNAME);
    }

    public ChartService(WebServiceFeature... features) {
        super(__getWsdlLocation(), CHARTSERVICE_QNAME, features);
    }

    public ChartService(URL wsdlLocation) {
        super(wsdlLocation, CHARTSERVICE_QNAME);
    }

    public ChartService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, CHARTSERVICE_QNAME, features);
    }

    public ChartService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ChartService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns ChartPort
     */
    @WebEndpoint(name = "ChartPortType")
    public ChartPort getChartPortType() {
        return super.getPort(new QName("http://jsonwebservice.googlecode.com/attachment", "ChartPortType"), ChartPort.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ChartPort
     */
    @WebEndpoint(name = "ChartPortType")
    public ChartPort getChartPortType(WebServiceFeature... features) {
        return super.getPort(new QName("http://jsonwebservice.googlecode.com/attachment", "ChartPortType"), ChartPort.class, features);
    }

    /**
     * 
     * @return
     *     returns ChartPort
     */
    @WebEndpoint(name = "SOAPChartPortType")
    public ChartPort getSOAPChartPortType() {
        return super.getPort(new QName("http://jsonwebservice.googlecode.com/attachment", "SOAPChartPortType"), ChartPort.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ChartPort
     */
    @WebEndpoint(name = "SOAPChartPortType")
    public ChartPort getSOAPChartPortType(WebServiceFeature... features) {
        return super.getPort(new QName("http://jsonwebservice.googlecode.com/attachment", "SOAPChartPortType"), ChartPort.class, features);
    }

    private static URL __getWsdlLocation() {
        if (CHARTSERVICE_EXCEPTION!= null) {
            throw CHARTSERVICE_EXCEPTION;
        }
        return CHARTSERVICE_WSDL_LOCATION;
    }

}

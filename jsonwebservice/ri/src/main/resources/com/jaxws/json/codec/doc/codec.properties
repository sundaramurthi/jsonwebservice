template.default.main = <html>\
				<head>\
					<style>\
					table#main {\
  						background-color: #FFFFFF;\
  						color: #827B60;\
  						border-style: solid;\
  						border-width: 1px;\
  						border-color: #444444;\
  						align: center;\
  						width: 75%;\
  						border-collapse: collapse;\
					}\
					table#methods{\
						border: 1px solid rgb(200, 200, 200);\
    					width: 100%;\
    					border-collapse: collapse;\
    					border:1px;\
					}\
					h1{ color: #367EA6;\
						line-height: 60px;\
						text-align: left;\
					}\
					button{\
						border: none;background-color: #DDDDDD; cursor: pointer;border-color: #999999 #666666 #666666 #999999;border-style: solid;color: #333333;font-weight: bold;border-width: 1px;font-size: 84%;\
					}\
					th{ color: #367EA6;\
						background-color: #E7F3FF;\
						border: 1px solid #CCCCCC;\
						font-weight: bold;\
						line-height: 50px;\
 						padding: 0 .5em;\
					}\
					#methods tr {\
					  border-bottom: 1px solid #999;\
					  border-spacing: 10px;\
					}\
					#methods tr.odd {\
					  background-color: #EEEEEE;\
					}\
					td {\
					    border: 1px solid #EFEFFF;\
					    padding: 12px;\
					}\
					table#methods td{\
						border: 1px solid #CCCCCC;\
					}\
					#header1{\
						background-color: #EFEFEF;\
					}\
					a {\
						text-decoration: none;\
						display: block;\
						font-size: 0.9em;\
					}\
					p {\
						color: #827B60;\
						border: none;\overflow: auto;\
					}\
					pre,code,textarea {\
						width: 100%;\
						max-height: 400px;\
						max-width: 800px;\
						min-width: 450px;\
					}\
					.edit,.format {\
						color: #625D5D;\
						border: none;\
						font-family: arial;\
						font-size: 7pt;\
						cursor: pointer;\
					}\
					textarea {\
						color: #827B60;\
						display : none;\
					}\
					</style>\
				</head>\
				<body>\
				<script type="text/javascript">\n\
					function ajaxCall(inId,outId){\n\
						var xmlHttp;\n\
							try {  // Firefox, Opera 8.0+, Safari\n\
								xmlHttp=new XMLHttpRequest();  \n\
							}catch (e){  // Internet Explorer\n\
								try  {   \n\
									xmlHttp=new ActiveXObject("Msxml2.XMLHTTP");\n\
								} catch (e){ \n\
									try{     \n\
										 xmlHttp=new ActiveXObject("Microsoft.XMLHTTP");\n\
									} catch (e) {\n\
										 alert("Your browser does not support AJAX!");\n\
										 return false;\n\
									}\n\
							   }\n\
						  }\n\
				  		  xmlHttp.onreadystatechange=function(){\n\
				    		if(xmlHttp.readyState==4){\n\
				    			 if((xmlHttp.status + '').substring(0,1) == '2'){\n\
				    			 	document.getElementById(outId).style.color = 'green';\n\
				    			 }else{\n\
				    			 	document.getElementById(outId).style.color = 'red';\n\
				    			 }\n\
				    			 if(console){\n\
				    			 	var ob =eval("("+xmlHttp.responseText+")");\n\
				    			 	console.log(ob)\n\
				    			 }\n\
				    			document.getElementById(outId).innerHTML = xmlHttp.responseText;\n\
				      		}\n\
				   		  }\n\
					  	xmlHttp.open("POST",'#END_POINT_URL#',true);\n\
					  	xmlHttp.setRequestHeader("Content-Type", "application/json;charset=UTF-8");\n\
					  	xmlHttp.setRequestHeader("X-Debug", "true");\n\
				  		xmlHttp.send(document.getElementById(inId).value);\n\
				  	}\n\
				  	function toggle(inId,edit){\n\
				  		if(!document.getElementById(inId).style.display || document.getElementById(inId).style.display == "none"){\n\
				  			document.getElementById(inId).style.display = "block";\n\
				  			edit.innerHTML = "hide";\n\
				  		}else{\n\
				  			document.getElementById(inId).style.display = "none";\n\
				  			edit.innerHTML = "edit";\n\
				  		}\n\
				  	}\
				  	function formatTextarea(oDataId,link) {\n\
  						var sJSON = document.getElementById(oDataId).innerHTML;\n\
  						if (sJSON.length > 0) {\n\
   	 						try {\n\
      						document.getElementById(oDataId).innerHTML = "<pre>"+formatJSON(JSON.parse(sJSON));+"</pre>"\n\
    						} catch(sError) {}\n\
  						} \n\
  						link.style.display='none';\
						}\n\
						\
						function realTypeOf(v) {if (typeof(v) == "object") {if (v === null) return "null";if (v.constructor == (new Array).constructor) return "array";\n\
			    			if (v.constructor == (new Date).constructor) return "date";if (v.constructor == (new RegExp).constructor) return "regex";\n\
			    			return "object";\n\
		  				}\n\
		  				return typeof(v);\n\
						}\n\
						\
						function formatJSON(oData, sIndent) {\n\
							if (arguments.length < 2) {var sIndent = "";}var sIndentStyle = "  ";\n\
   						var sDataType = realTypeOf(oData);\n\
   						if (sDataType == "array") {if (oData.length == 0) {return "[]";}var sHTML = "[";}\n\
   						else {var iCount = 0;for (var o in oData){iCount++;}if (iCount == 0) { return "{}";}var sHTML = "{";}\n\
   						var iCount = 0;\n\
   						for (var sKey in oData){\n\
   							var vValue = oData[sKey];\n\
   							if (iCount > 0) {sHTML += ",";}\n\
			    			if (sDataType == "array") {sHTML += ("\\n" + sIndent + sIndentStyle);}\n\
			    			else {sHTML += ("\\n" + sIndent + sIndentStyle + "\\"" + sKey + "\\"" + ": ");}\n\
			    			switch (realTypeOf(vValue)) {\n\
		      				case "array":\n\
						      case "object":\n\
						        sHTML += formatJSON(vValue, (sIndent + sIndentStyle));break;\n\
						      case "boolean":\n\
						      case "number":\n\
						        sHTML += vValue.toString();break;\n\
						      case "null":\n\
						        sHTML += "null";break;\n\
						      case "string":\n\
						        sHTML += ("\\"" + vValue + "\\"");break;\n\
						      default:\n\
						        sHTML += ("TYPEOF: " + typeof(vValue));                                                                                              }\n\
		        				iCount++;\n\
   						}\n\
		  				if (sDataType == "array") {\n\
    						sHTML += ("\\n" + sIndent + "]");\n\
  						} else {\n\
    						sHTML += ("\\n" + sIndent + "}");\n\
  						}\n\
   						return sHTML;\n\
  					}\n\
				</script>\
					<table id="main" align="center">\
						<tr>\
							<td align="center" id="header1"><h1>#SERIVICE_NAME#</h1></td>\
						</tr>\
						<tr>\
							<td align="left">\
								<h4>#END_POINT_URL#</h4>\
								<ul><li>\
								<a href="#END_POINT_URL#?wsdl" target="_blank">#END_POINT_URL#?wsdl</a>\
								</li></ul>\
								#DOCUMENT_ENDS#\
							</td>\
						</tr>\
						<tr>\
							<td>\
								<table id="methods">\
									<tr>\
										<th>Method</th>\
										<th>Input</th>\
										<th> </th>\
										<th>Output</th>\
										<th>Faults</th>\
									</tr>\
									#METHODS#\
								</table>\
							</td>\
						</tr>\
						<tr>\
							<td align="right">Powered by:\
								<a href="http://code.google.com/p/jsonwebservice/" target="_blank">jsonwebservice</a><br/>\
							</td>\
						</tr>\
					</table>\
				</body>\
				</html>
				
template.default.method	= 	<tr align="center" class="#TR_CLASS#">\
						<td width="20%" align="left"><a href="?form#METHOD_NAME#" target="_blank">#METHOD_NAME#</a></td>\
						<td align="left">\
							<p id="#METHOD_NAME#_display">#INPUT_JSON#</p>\
							<textarea rows="5" id="#METHOD_NAME#_input">#INPUT_JSON#</textarea>\
							<div class="edit" onclick="javaScript:toggle('#METHOD_NAME#_input',this);">edit</div>\
							<div class="format" onclick="javaScript:formatTextarea('#METHOD_NAME#_display',this);">format</div>\
						</td>\
						<td align="center">\
							<button onclick="ajaxCall('#METHOD_NAME#_input','#METHOD_NAME#_output');"> &gt;&gt; </button>\
						</td>\
						<td align="left">\
							<p rows="5" cols="40" id="#METHOD_NAME#_output">#OUTPUT_JSON#</p>\
						</td>\
						<td align="left">\
							<p rows="5" cols="40" id="#METHOD_NAME#_fault">#FAULT_JSON#</p>\
						</td>\
					</tr>
					
template.config.main = <htm>\
												<head>\
													<style type="text/css">td, th {border:1px solid silver; padding:1px 3px 1px 3px;} td {background-color:#F5F5F5;} td.dirservice, div.dirservice {color:#aa0000} th {color:#ffffff; background-color:#708090;} table {border-collapse: collapse}</style>\
												</head>\
												<body>\
													<h3>%s configuration</h3>\
													<table align="center" width="%s">\
														<tr>\
															<th>Name</th><th>Value</th>\
														</tr>\
														%s\
													<table>\
												</body></html>				

template.config.property = <tr><td>%s</td><td>%s</td></tr>

template.client.js = ,"invoke":function(oOperationMetaData,oInput,callback){\
	new Ajax.Request(oOperationMetaData.config.endPoint,{\
		method:'post',\
		requestHeaders: {Accept: oOperationMetaData.config.responseContentType},\
		postBody: '{"'+oOperationMetaData.config.requestPayload+'":'+Object.toJSON(oInput)+'}',\
		onComplete: callback\
	});\
},"validateComplexType":function(oOperationMetaData,oInput){\
	var errors = new Array();\
	for(prop in oOperationMetaData){\
		\
	}\
	return errors;\
},"validateSimpleType":function(oDataTypeMetaData,oData){\
	var errors = new Array();\
	// Assert oDataTypeMetaData not null\
	// Test 1 is nillable?\
	if(oData == null && !oDataTypeMetaData.nillable){ // For field null\
		var er = {};\
		er.type = "nillable";\
		er.found = oData;\
		er.expected = oDataTypeMetaData.type;\
		errors.push(er);\
	}\
	// Test 2 check required field Should not be empty\
	if((errors.length > 0 || oData == "") && oDataTypeMetaData.required){\
		var er = {};\
		er.type = "required";\
		er.found = oData;\
		er.expected = oDataTypeMetaData.type;\
		errors.push(er);\
	}\
	// Test 3 check type\
	//if(errors.length > 0 ){\
		// If any one above 2 fail, type error\
	//}\
	// Test 4 restrictions\
	return errors;\
}\
							
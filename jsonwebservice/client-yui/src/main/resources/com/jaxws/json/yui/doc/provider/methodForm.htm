<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
 <head>
 	<title>#METHOD_NAME#</title>
 	<link href="?CLIENT_RESOURCE=inputex/build/inputex-min.css" type="text/css" rel="stylesheet"/>
 	<style type="text/css">
	  html {background-color: #F2F2F2; }
 	</style>
 	<script src="?CLIENT_RESOURCE=inputex/lib/yui/yuiloader/yuiloader-min.js"></script>  
 	<script src="?CLIENT_RESOURCE=inputex/js/inputex-loader.js"></script>
 </head>
 <body>
	<h2>#METHOD_NAME#</h2>
	<div id='#METHOD_NAME#' class='inputForm'></div>
	<h2>#METHOD_NAME# Response</h2>
	<div id='#METHOD_NAME#out' class='outputForm'></div>
	<script type="text/javascript">
	/**
	"inputex","inputex-field",
    "inputex-jsonschema","inputex-datatable","inputex-button","inputex-jsonform","inputex-stringfield",
    "inputex-checkbox","inputex-datefield","inputex-integerfield","inputex-selectfield","inputex-emailfield",
    "inputex-numberfield","inputex-passwordfield","inputex-radiofield","inputex-textarea","inputex-filefield",
    "inputex-ddlist","inputex-listfield","inputex-datepickerfield","inputex-autocomplete","inputex-dateselectmonthfield",
    "inputex-datesplitfield","inputex-datetimefield"*/
	
		var loader = new YAHOO.util.YUILoader({ 
			require: ["yahoo","event","connection","utilities","container","dom","button","element",
			          "layout","json","datasource","datatable","event","inputex-css","inputex-build"
			          ], 
			loadOptional: true, 
			base: "?CLIENT_RESOURCE=inputex/lib/yui/",
			onSuccess: function() {
				// Create the JsonSchema builder object
				var schemaIdentifierInMap = #JSON_METHOD_SCHEMA#;
				var builder = new inputEx.JsonSchema.Builder({
					'schemaIdentifierMap': schemaIdentifierInMap
				});
				// Get the inputEx field definition from the "Person" object
				var inputExInDefinition = builder.schemaToInputEx(schemaIdentifierInMap["#METHOD_NAME#"]);
				var #METHOD_NAME#formResponse = null;
				// Add 'container1' as parent element
				var #METHOD_NAME#form = new inputEx.JSONForm( { 
					fields: [inputExInDefinition],
		            buttons: [{type: 'submit', value: 'Submit'},{type: 'reset', value: 'Reset'}],
		            ajax : {
		            	wrapObject: "#METHOD_NAME#",
		        		uri: '#END_POINT_URL#',
		        		callback: {
		           			success: function(o) {
		           				// RESPONSE FORM
		           				// Create the JsonSchema builder object
		           				if( #METHOD_NAME#formResponse){
		           				 	#METHOD_NAME#formResponse.destroy();  
		           				 	delete #METHOD_NAME#formResponse;
		           				}
		           				var schemaIdentifierOutMap = #JSON_METHOD_RESPONSE_SCHEMA#;
		           				var builder = new inputEx.JsonSchema.Builder({
		           					'schemaIdentifierMap': schemaIdentifierOutMap
		           				});
		           				
		           				var val = YAHOO.lang.JSON.parse(o.responseText);
		           				val["$schema"] = schemaIdentifierOutMap["#METHOD_NAME#"];
		           			      
		           				// Get the inputEx field definition from the "Person" object
		           				var inputExOutDefinition = builder.formFromInstance(val);
		           				// Add 'container1' as parent element
		           				#METHOD_NAME#formResponse = new inputEx.JSONForm( { 
		           					fields: [inputExOutDefinition],
		           		            parentEl: '#METHOD_NAME#out'
		           		         });
		           				#METHOD_NAME#formResponse.disable();
		           			},
		           			failure: function(o) { alert("failure", o); }
		        		}
		    		},
		            parentEl: '#METHOD_NAME#'
		         });
				var url = window.location.toString();
				 //get the parameters
				 url.match(/\?(.+)$/);
				 var params = RegExp.$1;
				 // split up the query string and store in an
				 // associative array
				 var params = params.split("&");
				 var queryStringList = {};
				 
				 for(var i=0;i<params.length;i++) {
					 var tmp = params[i].split("=");
					 if(tmp.length == 2 && #METHOD_NAME#form.form[tmp[0]]){
					 	#METHOD_NAME#form.form[tmp[0]].value=tmp[1];
					 }
				 }
			}
		}); 
		loader.addModule({
			name: 'inputex-build',
			type: 'js',
	  	   	fullpath: '?CLIENT_RESOURCE=inputex/build/inputex.js',
	  	   	requires:[]
		});
		loader.addModule({
			name: 'inputex-css',
			type: 'css',
			fullpath: '?CLIENT_RESOURCE=inputex/build/inputex-min.css',
			requires: ['reset', 'fonts']
		});
		//YAHOO.addInputExModules(loader, '?CLIENT_RESOURCE=inputex/'); 
		loader.insert(); 
	</script>
 </body>
</html>